<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CTF on Shin&#39;s Blog</title>
    <link>/tags/ctf/</link>
    <description>Recent content in CTF on Shin&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-TW</language>
    <copyright>©2020 Notepadium.</copyright>
    <lastBuildDate>Wed, 08 Jul 2020 17:51:39 +0800</lastBuildDate>
    
        <atom:link href="/tags/ctf/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASIS CTF 2020 pwn Full Protection Writeup</title>
      <link>/posts/2020/07/asisctf2020_full_protection_writeup/</link>
      <pubDate>Wed, 08 Jul 2020 17:51:39 +0800</pubDate>
      
      <guid>/posts/2020/07/asisctf2020_full_protection_writeup/</guid>
      <description>ASIS CTF 2020 pwn Full Protection Writeup 此題為 ASIS 的暖身題，但並非想像中的極易簡單 不過很裸，測試之後會發現有 format string 的漏洞。 檢查保護機制 首先檢查此程式有開啟那些保護，發現全</description>
    </item>
    
    <item>
      <title>AIS3 2020 Pre-Exam CTF pwn Portal Gun writeup</title>
      <link>/posts/2020/06/ais3ctf2020_portal_gun_writeup/</link>
      <pubDate>Sat, 20 Jun 2020 15:42:33 +0800</pubDate>
      
      <guid>/posts/2020/06/ais3ctf2020_portal_gun_writeup/</guid>
      <description>AIS3 2020 Pre-Exam CTF Portal Gun Writeup Author: Sophie Shin Time: 2020/06/10 10:00 A.M. 為了配合AIS3要抽選手繳交 wirteup，就延後發文了 前言 2019 第一次參加 MyFirstCTF 之後有幸錄取 AIS3 課程，便開始入坑 pwn 在那之</description>
    </item>
    
    <item>
      <title>Stack Migration</title>
      <link>/posts/2020/05/migration/</link>
      <pubDate>Thu, 14 May 2020 23:53:59 +0800</pubDate>
      
      <guid>/posts/2020/05/migration/</guid>
      <description>Stack Migration Stack Migration 指 ROP (Return Oriented Programming) 的一種技巧，可在當 stack 不夠使用時，利用 ROP 控制來竄改 stack pointer (esp or rsp)，指向其他位址，以獲取額外的寫入空間。 範例原始碼 #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; char</description>
    </item>
    
    <item>
      <title>函式呼叫(I) - 參數傳遞</title>
      <link>/posts/2020/04/callfunction/</link>
      <pubDate>Tue, 21 Apr 2020 11:30:51 +0800</pubDate>
      
      <guid>/posts/2020/04/callfunction/</guid>
      <description>函式呼叫(I) - 參數傳遞 前言 這學期修了計算機組織的課程，了解到 MIPS 呼叫函式所暫存的參數方式與 x86、x64 有一些不同，在了解逆向分析之函數分析</description>
    </item>
    
    <item>
      <title>靜態分析工具介紹</title>
      <link>/posts/2020/02/sast/</link>
      <pubDate>Mon, 17 Feb 2020 14:35:31 +0800</pubDate>
      
      <guid>/posts/2020/02/sast/</guid>
      <description>Intro to Static Analysis Tools 打 CTF 時，若沒有用對工具，在分析時會花費許多時間 在寫 reverse 或 pwn 時，使用工具是絕對必要的，能夠適時減少不必要的時間。 在此介紹幾個打 CTF 常使用</description>
    </item>
    
    <item>
      <title>解 ROP 之工具與詳細流程</title>
      <link>/posts/2020/02/easyrop/</link>
      <pubDate>Mon, 17 Feb 2020 13:37:01 +0800</pubDate>
      
      <guid>/posts/2020/02/easyrop/</guid>
      <description>ROP writeup checksec rop Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) file rop rop: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, for GNU/Linux 2.6.32, BuildID[sha1]=6608f6b8f49633b8d8248f7665b6ba35659a595a, not stripped 線索1：statically linked 動態連結是當程式執行時，才會去 library</description>
    </item>
    
    <item>
      <title>ELF 五種保護機制</title>
      <link>/posts/2020/02/protection/</link>
      <pubDate>Thu, 13 Feb 2020 00:10:46 +0800</pubDate>
      
      <guid>/posts/2020/02/protection/</guid>
      <description>ELF 五種保護機制 Stack Canary Stack Protector，也就是用來保護 Stack 段 用來防 bof 漏洞攻擊 若有開啟 Canary，則程式執行時會在 return address 前放一個隨機值叫 Canary 如果利</description>
    </item>
    
  </channel>
</rss>